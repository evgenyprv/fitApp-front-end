{"version":3,"sources":["reducer/index.js","reducer/workout_reducer.js","action/types.js","configureStore.js","container/Home.jsx","action/search_workout.js","container/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["combineReducers","workout_reducer","state","action","type","Object","assign","isFetching","receivedDate","payload","error","loggerMiddleware","createLogger","Home","props","handleOnClick","bind","this","onRandomizerClick","Container","className","Card","centered","raised","Content","to","Button","style","height","width","onClick","React","Component","connect","dispatch","a","Date","now","Result","Label","as","color","ribbon","List","App","exact","path","component","Boolean","window","location","hostname","match","preloadedState","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4TAGeA,kBAAgB,CAC3BC,gBCFW,WAA4C,IAApBC,EAAmB,uDAAX,GAAIC,EAAO,uCACtD,OAAOA,EAAOC,MACV,ICJuB,kBDKf,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAC5BK,YAAY,EACZC,aAAcL,EAAOK,eAEjC,ICRyB,oBDSrB,OAAOH,OAAOC,OAAO,GAAIJ,EAAO,CAC5BK,YAAY,EACZE,QAASN,EAAOM,QAChBD,aAAcL,EAAOK,eAE7B,ICbuB,kBDcnB,OAAOH,OAAOC,OAAO,GAAIJ,EAAO,CAC5BK,YAAY,EACZG,MAAOP,EAAOO,MACdF,aAAcL,EAAOK,eAE7B,QACI,OAAON,MEjBbS,EAAmBC,yB,gICkBnBC,G,0BAEF,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,cAAgB,EAAKA,cAAcC,KAAnB,gBAFP,E,6EAMdC,KAAKH,MAAMI,sB,+BAIX,OACI,kBAACC,EAAA,EAAD,KACI,yBAAKC,UAAU,QACX,kBAACC,EAAA,EAAD,CAAMC,SAAS,OACXC,OAAO,QAMP,kBAACF,EAAA,EAAKG,QAAN,KACI,kBAAC,IAAD,CAAMC,GAAK,WACP,kBAACC,EAAA,EAAD,CAAQtB,KAAK,SACbuB,MAAO,CAACC,OAAQ,QAASC,MAAO,SAChCC,QAAWb,KAAKF,eAFhB,iC,GAxBbgB,IAAMC,YA4CVC,cAAQ,MANI,SAAAC,GACvB,MAAO,CACLhB,kBAAmB,WAAOgB,ECrC5B,uCAAO,WAAOA,GAAP,SAAAC,EAAA,sDACHD,EAxBE,CACF9B,KHJuB,kBGKvBI,aAAc4B,KAAKC,QAqBhB,2CAAP,mDAAM,QDyCKJ,CAAkCpB,G,iBE9D3CyB,G,mBAEF,WAAYxB,GAAO,qEACTA,I,sEAIcG,KAAKH,MAAjBL,QAER,OACI,kBAACU,EAAA,EAAD,CAAWC,UAAU,mBACjB,kBAACC,EAAA,EAAD,CAAMC,SAAS,OACXC,OAAO,QACP,kBAACgB,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,MAAMC,QAAM,GAAhC,UACA,kBAACC,EAAA,EAAD,MAQA,kBAACJ,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,SAASC,QAAM,GAAnC,QACA,kBAACC,EAAA,EAAD,MAQA,kBAACJ,EAAA,EAAD,CAAOC,GAAG,IAAIC,MAAM,OAAOC,QAAM,GAAjC,QACA,kBAACC,EAAA,EAAD,Y,GAhCCZ,IAAMC,YA8CZC,gBAAUK,G,OChCVM,MAbf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,kBAAC,IAAD,CAAOiC,KAAK,UAAUC,UAAWT,QCAvBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,INFuCC,EMEjCC,ENDGC,YACLC,EACAH,EACAI,YAAgBC,IAAiB/C,IMArCgD,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAERO,SAASC,eAAe,SDoHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3D,GACL4D,QAAQ5D,MAAMA,EAAM6D,c","file":"static/js/main.2b1d13ea.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport workout_reducer from './workout_reducer'\n\nexport default combineReducers({\n    workout_reducer\n})","import {START_SEARCHING, SEARCHING_SUCCESS, SEARCHING_ERROR} from '../action/types'\n\nexport default function workoutReducer(state = [], action){\n    switch(action.type){\n        case START_SEARCHING:\n                return Object.assign({}, state, {\n                    isFetching: true, \n                    receivedDate: action.receivedDate,\n                })\n        case SEARCHING_SUCCESS:\n            return Object.assign({}, state, {\n                isFetching: false, \n                payload: action.payload,\n                receivedDate: action.receivedDate,\n            })\n        case SEARCHING_ERROR:\n            return Object.assign({}, state, {\n                isFetching: false, \n                error: action.error,\n                receivedDate: action.receivedDate,\n            })\n        default:\n            return state;\n    }\n}","export const START_SEARCHING = \"START_SEARCHING\";\nexport const SEARCHING_SUCCESS = \"SEARCHING_SUCCESS\";\nexport const SEARCHING_ERROR = \"SEARCHING_ERROR\";","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducer'\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}","import React from 'react';\nimport { Container, Button, Card, Dropdown} from 'semantic-ui-react'\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport {fetchWorkout} from '../action/search_workout';\n\nimport './Home.css';\nimport 'semantic-ui-css/semantic.min.css';\n\n// const workoutOptions =[\n//     {\n//         key:'Intense',\n//         text: 'Intense',\n//         value: 'Intense'\n//     },\n//     {\n//         key: 'Lower Rep/High weight',\n//         text: 'Lower Rep/High weight',\n//         value: 'Lower Rep/High weight'\n//     }\n    \n// ]\n\nclass Home extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    handleOnClick(){\n        this.props.onRandomizerClick();\n    }\n\n    render(){\n        return(\n            <Container>\n                <div className=\"Home\">\n                    <Card centered=\"true\"\n                        raised=\"true\">\n                        {/* <Dropdown\n                            placeholder='Select Type of Workout'\n                            fluid\n                            selection\n                            options={workoutOptions}/> */}\n                        <Card.Content>\n                            <Link to = '/result' >\n                                <Button type='submit' \n                                style={{height: '100px', width: '200px'}}\n                                onClick = {this.handleOnClick}>\n                                    Get My Daily Workout\n                                </Button>\n                            </Link>\n                        </Card.Content>\n                    </Card>\n                </div>\n            </Container>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      onRandomizerClick: () => {dispatch(fetchWorkout())}\n    }\n  }\n\nexport default connect(null, mapDispatchToProps)(Home);","import {START_SEARCHING, SEARCHING_SUCCESS, SEARCHING_ERROR} from './types'\n\nconst startFetching = () =>{\n    return{\n        type: START_SEARCHING,\n        receivedDate: Date.now()\n    }\n}\n\nconst fetchingSuccess = (data) =>{\n    return{\n        type:SEARCHING_SUCCESS,\n        payload: data,\n        receivedDate: Date.now()\n    }\n}\n\nconst fetchingError = (err) => {\n    return{\n        type: SEARCHING_ERROR,\n        error: err,\n        receivedDate: Date.now()\n    }\n}\n\nexport const fetchWorkout = () => {\n    return async (dispatch) => {\n        dispatch(startFetching())\n    }\n}","import React from 'react';\nimport { Container, Card, List, Label } from 'semantic-ui-react';\nimport { connect } from 'react-redux'\nimport './Result.css';\n\nclass Result extends React.Component{\n\n    constructor(props){\n        super(props)\n    }\n\n    render(){\n        const { payload } = this.props\n\n        return(\n            <Container className=\"container-extra\">\n                <Card centered=\"true\"\n                    raised=\"true\">\n                    <Label as='a' color='red' ribbon>Cardio</Label>\n                    <List >\n                        {/* payload.map((info, key) => \n                        <List.Item key={key}>\n                            <List.Content>\n                                Item1\n                            </List.Content>\n                        </List.Item>) */}\n                    </List>\n                    <Label as='a' color='orange' ribbon>Body</Label>\n                    <List>\n                        {/* payload.map((info, key) => \n                        <List.Item key={key}>\n                            <List.Content>\n                                Item1\n                            </List.Content>\n                        </List.Item>) */}\n                    </List> \n                    <Label as='a' color='teal' ribbon>Core</Label>\n                    <List>\n                        {/* payload.map((info, key) => \n                        <List.Item key={key}>\n                            <List.Content>\n                                Item1\n                            </List.Content>\n                        </List.Item>) */}\n                    </List>\n                </Card>\n            </Container>\n        )\n    }\n}\n\nexport default connect()(Result);","import React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './container/Home.jsx';\nimport Result from './container/Result.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/result\" component={Result} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}